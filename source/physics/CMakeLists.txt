if (USE_PHYSX)
	set(USE_PHYSICS_MODULE on PARENT_SCOPE)

	file(GLOB source_files "*.h*" "*.c*")
	add_library(flame_physics SHARED ${source_files})
	set_property(TARGET flame_physics PROPERTY MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
	set_target_properties(flame_physics PROPERTIES FOLDER "flame")
	target_compile_definitions(flame_physics PRIVATE FLAME_PHYSICS_MODULE)
	target_link_libraries(flame_physics flame_graphics)

	target_link_libraries(flame_physics debug "${PHYSX_DEBUG_LIBS_DIR}/PhysXFoundation_64.lib")
	target_link_libraries(flame_physics debug "${PHYSX_DEBUG_LIBS_DIR}/PhysX_64.lib")
	target_link_libraries(flame_physics debug "${PHYSX_DEBUG_LIBS_DIR}/PhysXCommon_64.lib")
	target_link_libraries(flame_physics debug "${PHYSX_DEBUG_LIBS_DIR}/PhysXCooking_64.lib")
	target_link_libraries(flame_physics debug "${PHYSX_DEBUG_LIBS_DIR}/PhysXExtensions_static_64.lib")
	target_link_libraries(flame_physics debug "${PHYSX_DEBUG_LIBS_DIR}/PhysXPvdSDK_static_64.lib")
	target_link_libraries(flame_physics debug "${PHYSX_DEBUG_LIBS_DIR}/PhysXCharacterKinematic_static_64.lib")

	target_link_libraries(flame_physics optimized "${PHYSX_RELEASE_LIBS_DIR}/PhysXFoundation_64.lib")
	target_link_libraries(flame_physics optimized "${PHYSX_RELEASE_LIBS_DIR}/PhysX_64.lib")
	target_link_libraries(flame_physics optimized "${PHYSX_RELEASE_LIBS_DIR}/PhysXCommon_64.lib")
	target_link_libraries(flame_physics optimized "${PHYSX_RELEASE_LIBS_DIR}/PhysXCooking_64.lib")
	target_link_libraries(flame_physics optimized "${PHYSX_RELEASE_LIBS_DIR}/PhysXExtensions_static_64.lib")
	target_link_libraries(flame_physics optimized "${PHYSX_RELEASE_LIBS_DIR}/PhysXPvdSDK_static_64.lib")
	target_link_libraries(flame_physics optimized "${PHYSX_RELEASE_LIBS_DIR}/PhysXCharacterKinematic_static_64.lib")

	target_include_directories(flame_physics PRIVATE "${PHYSX_INCLUDE_DIR}")
	target_include_directories(flame_physics PRIVATE "${PHYSX_INCLUDE_DIR}/../../pxshared/include")

	set(no_copy $<NOT:$<CONFIG:Debug>>)
	add_custom_command(TARGET flame_physics POST_BUILD COMMAND ${CMAKE_COMMAND} -E $<${no_copy}:echo> $<${no_copy}:"copy omitted for non-debug build, command would have been "> copy_if_different "${PHYSX_DEBUG_LIBS_DIR}/PhysXFoundation_64.dll" $(TargetDir))
	add_custom_command(TARGET flame_physics POST_BUILD COMMAND ${CMAKE_COMMAND} -E $<${no_copy}:echo> $<${no_copy}:"copy omitted for non-debug build, command would have been "> copy_if_different "${PHYSX_DEBUG_LIBS_DIR}/PhysX_64.dll" $(TargetDir))
	add_custom_command(TARGET flame_physics POST_BUILD COMMAND ${CMAKE_COMMAND} -E $<${no_copy}:echo> $<${no_copy}:"copy omitted for non-debug build, command would have been "> copy_if_different "${PHYSX_DEBUG_LIBS_DIR}/PhysXCommon_64.dll" $(TargetDir))
	add_custom_command(TARGET flame_physics POST_BUILD COMMAND ${CMAKE_COMMAND} -E $<${no_copy}:echo> $<${no_copy}:"copy omitted for non-debug build, command would have been "> copy_if_different "${PHYSX_DEBUG_LIBS_DIR}/PhysXCooking_64.dll" $(TargetDir))
	set(no_copy $<CONFIG:Debug>)
	add_custom_command(TARGET flame_physics POST_BUILD COMMAND ${CMAKE_COMMAND} -E $<${no_copy}:echo> $<${no_copy}:"copy omitted for non-release build, command would have been "> copy_if_different "${PHYSX_RELEASE_LIBS_DIR}/PhysXFoundation_64.dll" $(TargetDir))
	add_custom_command(TARGET flame_physics POST_BUILD COMMAND ${CMAKE_COMMAND} -E $<${no_copy}:echo> $<${no_copy}:"copy omitted for non-release build, command would have been "> copy_if_different "${PHYSX_RELEASE_LIBS_DIR}/PhysX_64.dll" $(TargetDir))
	add_custom_command(TARGET flame_physics POST_BUILD COMMAND ${CMAKE_COMMAND} -E $<${no_copy}:echo> $<${no_copy}:"copy omitted for non-release build, command would have been "> copy_if_different "${PHYSX_RELEASE_LIBS_DIR}/PhysXCommon_64.dll" $(TargetDir))
	add_custom_command(TARGET flame_physics POST_BUILD COMMAND ${CMAKE_COMMAND} -E $<${no_copy}:echo> $<${no_copy}:"copy omitted for non-release build, command would have been "> copy_if_different "${PHYSX_RELEASE_LIBS_DIR}/PhysXCooking_64.dll" $(TargetDir))

	add_dependencies(flame_physics typeinfogen_dep)
	add_custom_command(TARGET flame_physics POST_BUILD COMMAND $<TARGET_FILE:typeinfogen> -i $<TARGET_FILE:flame_physics> -d "${CMAKE_CURRENT_SOURCE_DIR}/typeinfo.desc")

	file(GLOB PUBLIC_HEADER "*.h*")
	list(FILTER PUBLIC_HEADER EXCLUDE REGEX ".*_private[.]h$")
	file(MAKE_DIRECTORY "${CMAKE_SOURCE_DIR}/include/flame/physics")
	add_custom_command(TARGET flame_physics PRE_BUILD COMMAND ${CMAKE_COMMAND} -E copy_if_different ${PUBLIC_HEADER} "${CMAKE_SOURCE_DIR}/include/flame/physics")
else()
	set(USE_PHYSICS_MODULE off PARENT_SCOPE)
endif()
