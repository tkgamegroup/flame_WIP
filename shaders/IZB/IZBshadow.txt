vert:
uniform mat4 matrixMVP
attribute vertex
condition beign Ani
uniformBlock aniMatrix
	mat4 deformerMatrix[256]
attribute cluster count
atribute bone ID
attribute cluster weight
condition end
condition begin AlphaTest
attribute texcoord
output vec2 tc
condition end
void main()
{
condition beign 0
	gl_Position = u_matrixMVP * vec4(a_vertex, 1);
condition end
condition beign Ani
	int cluCount = int(a_clusterCount);

	if(cluCount == 0)
		gl_Position = u_matrixMVP * vec4(a_vertex, 1);
	else
	{
		mat4 mat = mat4(
		0.0, 0.0, 0.0, 0.0, 
		0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0, 
		0.0, 0.0, 0.0, 0.0);

		for(int i = 0; i < cluCount; i++)
		{
			int index = 0;
			float weight = 0.0;
			mat += aniMatrix.deformerMatrix[int(a_boneID[i])] * a_clusterWeight[i];
		}
		gl_Position = u_matrixMVP * mat * vec4(a_vertex, 1);
	}
condition end
condition begin AlphaTest
	vs_out.tc = a_texcoord;
condition end
}

frag:
uniform vec2 lightPlaneSize
condition begin AlphaTest
texture float 2D tex
condition end
layout (binding = 0, r32ui) uniform coherent uimage2D imgStartOffset;
struct list_item
{
	vec2 checkPosition;
	ivec2 samplePosition;
	float depth;
	uint next;
};
layout (binding = 0, std430) buffer bufFragLink
{
	list_item item[];
};
layout (binding = 1, r8) uniform coherent image2D imgShadow;
float myCross(vec2 a, vec2 b)
{
	return a.x * b.y - a.y * b.x;
}
bool sameSide(vec2 a, vec2 b, vec2 c, vec2 p)
{
	vec2 ab = b - a;
    vec2 ac = c - a;
    vec2 ap = p - a;
 
    return myCross(ab, ac) * myCross(ab, ap) >= 0.0;
}
void main()
{
condition beign AlphaTest
	if (texture(tex, fs_in.tc).a < 0.5)
		discard;
condition end
	vec2 tc = (gl_FragCoord.xy / u_lightPlaneSize) * 2.0 - 1.0;
	if (tc.x < fs_in.minBB.x || tc.x > fs_in.maxBB.x || tc.y < fs_in.minBB.y || tc.y > fs_in.maxBB.y)
		discard;
	uint n = imageLoad(imgStartOffset, ivec2(gl_FragCoord.xy)).r;
	while (n != 0xffffffff)
	{
		list_item this_item = item[n];
		vec2 pa = fs_in.pa.xy;
		vec2 pb = fs_in.pb.xy;
		vec2 pc = fs_in.pc.xy;
		bool inTri = sameSide(pa, pb, pc, this_item.checkPosition) &&
					sameSide(pb, pc, pa, this_item.checkPosition) &&
					sameSide(pc, pa, pb, this_item.checkPosition);
		if (inTri)
		{
			float z = -(fs_in.equation.x * this_item.checkPosition.x + fs_in.equation.y * this_item.checkPosition.y + fs_in.equation.w) / fs_in.equation.z;
			z = z * 0.5 + 0.5;
			if (this_item.depth - 0.00001 > z)
				imageStore(imgShadow, this_item.samplePosition, vec4(0, 0, 0, 0));
		}
		n = this_item.next;
	}
	discard;
}